import com.mongodb.*;
import java.net.UnknownHostException;
import java.util.*;

public class ClientRevertByEmail_DBObject {

    public static void main(String[] args) throws UnknownHostException {
        MongoClient mongoClient = new MongoClient("localhost", 27017);
        DB db = mongoClient.getDB("customerVerification");

        DBCollection contactCol = db.getCollection("contact");
        DBCollection clientCol = db.getCollection("client");
        DBCollection configCol = db.getCollection("configuration");

        revertClientByEmail("john.doe@example.com", contactCol, clientCol, configCol);
    }

    static void revertClientByEmail(String emailId,
                                    DBCollection contactCollection,
                                    DBCollection clientCollection,
                                    DBCollection configCollection) {

        DBObject contact1 = contactCollection.findOne(new BasicDBObject("_id", emailId));
        if (contact1 == null || contact1.get("customerId") == null) {
            System.err.println("‚ùå No valid contact or customerId found for: " + emailId);
            return;
        }

        String customerId = contact1.get("customerId").toString();
        List<DBObject> relatedContacts = new ArrayList<>();
        DBCursor cursor = contactCollection.find(new BasicDBObject("customerId", customerId));
        while (cursor.hasNext()) relatedContacts.add(cursor.next());

        if (relatedContacts.size() == 1) {
            // Pattern 1: Single contact ‚Üí just update client _id
            DBObject contact = relatedContacts.get(0);
            DBObject existingClient = clientCollection.findOne(new BasicDBObject("_id", customerId));
            if (existingClient != null) {
                String newId = contact.get("userId").toString();
                existingClient.put("_id", newId);

                clientCollection.remove(new BasicDBObject("_id", customerId));
                System.out.println("üóëÔ∏è Deleted client with Customer _id: " + customerId);

                clientCollection.insert(existingClient);
                System.out.println("‚úÖ Inserted client with Updated Email _id: " + newId);

                contactCollection.update(
                    new BasicDBObject("_id", newId),
                    new BasicDBObject("$unset", new BasicDBObject("customerId", ""))
                );
                System.out.println("üßπ Removed customerId from contact: " + newId);
            }
        } else {
            // Pattern 2+: multiple related contacts ‚Üí rebuild split clients
            DBObject mergedClient = clientCollection.findOne(new BasicDBObject("_id", customerId));
            if (mergedClient == null) {
                System.err.println("‚ùå No merged client found for customerId: " + customerId);
                return;
            }

            for (DBObject con : relatedContacts) {
                if (!emailId.equals(con.get("_id").toString())) continue;

                String userId = con.get("userId").toString();
                List<DBObject> configs = getConfigurationsByUserId(configCollection, userId);

                List<String> configIds = new ArrayList<>();
                for (DBObject cfg : configs) {
                    Object id = cfg.get("_id");
                    if (id != null) configIds.add(id.toString());
                }

                List<DBObject> images = filterImagesFromConfig(configs, toList(mergedClient.get("imageData")));
                List<DBObject> certificates = filterCertificatesFromConfig(configs, toList(mergedClient.get("certificateData")));

                DBObject newClient = new BasicDBObject();
                newClient.put("_id", userId);
                newClient.put("configurationIds", configIds);
                newClient.put("imageData", images);
                newClient.put("certificateData", certificates);
                newClient.put("assignments", mergedClient.get("assignments"));
                newClient.put("validated", mergedClient.get("validated"));

                clientCollection.remove(new BasicDBObject("_id", userId));
                clientCollection.insert(newClient);
                System.out.println("‚úÖ Inserted client: " + userId);

                contactCollection.update(
                    new BasicDBObject("_id", userId),
                    new BasicDBObject("$unset", new BasicDBObject("customerId", ""))
                );
                System.out.println("üßπ Removed customerId from contact: " + userId);
            }

            // Optionally delete merged client afterwards:
            clientCollection.remove(new BasicDBObject("_id", customerId));
            System.out.println("üóëÔ∏è Deleted merged client with _id: " + customerId);
        }
    }

    static List<DBObject> getConfigurationsByUserId(DBCollection configCol, String userId) {
        List<DBObject> list = new ArrayList<>();
        DBCursor c = configCol.find(new BasicDBObject("createdBy", userId));
        while (c.hasNext()) list.add(c.next());
        return list;
    }

    @SuppressWarnings("unchecked")
    static List<DBObject> toList(Object obj) {
        if (obj instanceof List) return (List<DBObject>) obj;
        return Collections.emptyList();
    }

    static List<DBObject> filterCertificatesFromConfig(List<DBObject> configs, List<DBObject> allCertificates) {
        Set<String> certIds = new HashSet<>();
        for (DBObject cfg : configs) {
            Object d = cfg.get("data");
            if (d instanceof DBObject && ((DBObject)d).containsField("certificateData")) {
                List<String> certList = (List<String>)((DBObject)d).get("certificateData");
                certIds.addAll(certList);
            }
        }
        return filterById(allCertificates, certIds, "id");
    }

    static List<DBObject> filterImagesFromConfig(List<DBObject> configs, List<DBObject> allImages) {
        Set<String> imgIds = new HashSet<>();
        for (DBObject cfg : configs) {
            Object d = cfg.get("data");
            if (d instanceof DBObject) {
                DBObject gds = (DBObject)((DBObject)d).get("generalDeviceSettings");
                if (gds != null && gds.get("imageId") != null) {
                    imgIds.add(gds.get("imageId").toString());
                }
            }
        }
        return filterById(allImages, imgIds, "id");
    }

    static List<DBObject> filterById(List<DBObject> items, Set<String> ids, String idField) {
        List<DBObject> filtered = new ArrayList<>();
        for (DBObject item : items) {
            if (ids.contains(item.get(idField))) filtered.add(item);
        }
        return filtered;
    }
}
