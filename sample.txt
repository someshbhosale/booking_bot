static void revertClientByEmail(String emailId,
                                    MongoCollection<Contact> contactCollection,
                                    MongoCollection<Client> clientCollection,
                                    MongoCollection<Document> configCollection) {

        Contact contact1 = contactCollection.find(Filters.eq("_id", emailId)).first();
        if (contact1 == null || contact1.getCustomerId() == null) {
            System.err.println("‚ùå No valid contact or customerId found for: " + emailId);
            return;
        }

        String customerId = contact1.getCustomerId();
        List<Contact> relatedContacts = contactCollection.find(Filters.eq("customerId", customerId)).into(new ArrayList<>());
        if(relatedContacts.size() == 1) {
            // ‚úÖ Scenario 1: Single Contact ‚Üí Revert `_id`
            Contact contact = relatedContacts.get(0);
            Client existingClient = clientCollection.find(Filters.eq("_id", customerId)).first();
            if (existingClient != null) {
                try {
                    existingClient.setId(contact.getUserId());
                    // Delete existing client
                    clientCollection.deleteOne(Filters.eq("_id", customerId));
                    System.out.println("üóëÔ∏è Deleted client with Customer _id for Pattern 1 and Pattern 2: " + customerId);

                    // Insert updated client
                    insertClientSafely(clientCollection, existingClient);
                    System.out.println("‚úÖ Inserted client with Updated Email _id: " + contact.getUserId());
                    removeCustomerIdFromContact(contactCollection, contact.getUserId());
                } catch (MongoWriteException e) {
                    System.err.println("‚ùå Error updating client Email _id for customerId: " + customerId + " ‚Üí " + e.getMessage());
                }

            }
        }
        else{
            Client mergedClient = clientCollection.find(Filters.eq("_id", customerId)).first();

            if (mergedClient == null) {
                System.err.println("‚ùå No merged client found for customerId: " + customerId);
                return;
            }

            // Reinsert split clients
            for (Contact con : relatedContacts) {
                if(con.getUserId().equals(emailId)){
                    List<Document> configs = getConfigurationsByUserId(configCollection, con.getUserId());
                    List<String> configIds = configs.stream().map(d -> d.get("_id").toString()).collect(Collectors.toList());
                    List<ImageData> images = filterImagesFromConfig(configs, mergedClient.getImageData());
                    List<ImageData> certificates = filterCertificatesFromConfig(configs, mergedClient.getCertificateData());
                    Client newClient = new Client(con.getUserId(), configIds, certificates, images, mergedClient.getAssignments(), mergedClient.isValidated());
                    insertClientSafely(clientCollection, newClient);
                    removeCustomerIdFromContact(contactCollection, con.getUserId());
                }
            }
            // Delete merged client
//            try {
//                clientCollection.deleteOne(Filters.eq("_id", customerId));
//                System.out.println("üóëÔ∏è Deleted merged client with _id: " + customerId);
//            } catch (MongoWriteException e) {
//                System.err.println("‚ùå Failed to delete merged client: " + e.getMessage());
//            }
        }
    }

    static boolean doesClientExist(MongoCollection<Client> collection, String id) {
        if(collection.find(Filters.eq("_id", id)).first() != null){
            collection.deleteOne(Filters.eq("_id", id));
        }
        return false;
    }

    static void insertClientSafely(MongoCollection<Client> collection, Client client) {
        if (!doesClientExist(collection, client.getId())) {
            try {
                collection.insertOne(client);
                System.out.println("‚úÖ Inserted client: " + client.getId());
            } catch (MongoWriteException e) {
                System.err.println("‚ùå Error inserting client: " + client.getId() + " ‚Üí " + e.getMessage());
            }
        } else {
            System.out.println("‚ÑπÔ∏è Client already exists: " + client.getId());
        }
    }

    static void removeCustomerIdFromContact(MongoCollection<Contact> contactCollection, String userId) {
        contactCollection.updateOne(Filters.eq("_id", userId), new Document("$unset", new Document("customerId", "")));
        System.out.println("üßπ Removed customerId from contact: " + userId);
    }

    static List<Document> getConfigurationsByUserId(MongoCollection<Document> configCollection, String userId) {
        return configCollection.find(Filters.eq("createdBy", userId)).into(new ArrayList<>());
    }

    static List<ImageData> filterCertificatesFromConfig(List<Document> configs, List<ImageData> allCertificates) {
        Set<String> certIds = new HashSet<>();
        for (Document doc : configs) {
            Document data = doc.get("data", Document.class);
            if (data != null && data.containsKey("certificateData")) {
                List<String> certList = data.getList("certificateData", String.class);
                certIds.addAll(certList);
            }
        }
        return allCertificates.stream().filter(img -> certIds.contains(img.getId())).collect(Collectors.toList());
    }

    static List<ImageData> filterImagesFromConfig(List<Document> configs, List<ImageData> allImages) {
        Set<String> imageIds = new HashSet<>();
        for (Document doc : configs) {
            Document data = doc.get("data", Document.class);
            if (data != null) {
                Document generalSettings = data.get("generalDeviceSettings", Document.class);
                if (generalSettings != null && generalSettings.containsKey("imageId")) {
                    imageIds.add(generalSettings.getString("imageId"));
                }
            }
        }
        return allImages.stream().filter(img -> imageIds.contains(img.getId())).collect(Collectors.toList());
    }
